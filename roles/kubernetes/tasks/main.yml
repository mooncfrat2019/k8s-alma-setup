---
- name: Установка containerd из локального rpm пакета
  block:
    - name: Копирование rpm пакета containerd на сервер
      copy:
        src: "files/packages/containerd-2.1.4-alt1.x86_64.rpm"
        dest: /tmp/containerd.rpm
        owner: root
        group: root
        mode: '0644'
      become: yes

    - name: Установка containerd через apt-get
      shell: apt-get install -y /tmp/containerd.rpm
      become: yes

    - name: Очистка временного файла
      file:
        path: /tmp/containerd.rpm
        state: absent
      become: yes

    - name: Создание базового конфига containerd
      copy:
        content: |
          version = 2
          root = "/var/lib/containerd"
          state = "/run/containerd"
          [grpc]
            address = "/run/containerd/containerd.sock"
          [plugins]
            [plugins."io.containerd.grpc.v1.cri"]
              sandbox_image = "{{ registry_url }}/pause:3.9"
              [plugins."io.containerd.grpc.v1.cri".containerd]
                snapshotter = "overlayfs"
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                  runtime_type = "io.containerd.runc.v2"
                  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                    SystemdCgroup = true
        dest: /etc/containerd/config.toml
        owner: root
        group: root
        mode: '0644'
      become: yes

    - name: Включение и запуск containerd
      systemd:
        name: containerd
        state: started
        enabled: yes
        daemon_reload: yes
      become: yes

    - name: Ожидание готовности containerd
      wait_for:
        path: /var/run/containerd/containerd.sock
        state: present
        timeout: 30
      become: yes

    - name: Проверка работы containerd
      command: crictl version
      register: containerd_check
      changed_when: false
      failed_when: containerd_check.rc != 0

- name: Установка crictl
  block:
    - name: Копирование и распаковка crictl
      unarchive:
        src: "files/binares/crictl-v1.28.0-linux-amd64.tar.gz"
        dest: /usr/bin
        owner: root
        group: root
        mode: '0755'
        remote_src: no  # Файл уже локальный в ansible
      become: yes

    - name: Настройка конфига crictl
      copy:
        content: |
          runtime-endpoint: unix:///var/run/containerd/containerd.sock
          image-endpoint: unix:///var/run/containerd/containerd.sock
          timeout: 10
          debug: false
        dest: /etc/crictl.yaml
        owner: root
        group: root
        mode: '0644'
      become: yes

    - name: Проверка работы crictl
      command: crictl --version
      register: crictl_result
      changed_when: false

- name: Обновление apt cache
  shell: apt-get update
  become: yes

- name: Установка Kubernetes компонентов через shell
  shell: |
    apt-get install -y \
      kubernetes1.28-client \
      kubernetes1.28-kubeadm \
      kubernetes1.28-kubelet \
      kubernetes1.28-master \
      kubernetes1.28-node \
      kubernetes1.28-common \
      kubernetes1.28-crio \
      python3-module-kubernetes-client \
      kube-vip
  become: yes

#- name: Запрет обновления пакетов Kubernetes
#  apt:
#    name: "{{ item }}"
#    state: held
#  loop:
#    - kubelet
#    - kubeadm
#    - kubectl

- name: Запуск и включение kubelet
  systemd:
    name: kubelet
    state: started
    enabled: yes
    daemon_reload: yes

- name: Создание конфигурации kubeadm для первого мастера
  template:
    src: kubeadm-config.yaml.j2
    dest: "/home/{{ k8s_user }}/kubeadm-config.yaml"
    owner: "{{ k8s_user }}"
    group: "{{ k8s_group }}"
    mode: 0644
  when: inventory_hostname == "master-node-1"

- name: Инициализация кластера на первом мастере
  command: |
    kubeadm init --config /home/{{ k8s_user }}/kubeadm-config.yaml --upload-certs
  args:
    creates: /etc/kubernetes/admin.conf
  when: inventory_hostname == "master-node-1"

- name: Настройка kubectl для первого мастера
  block:
    - name: Копирование конфигурации для пользователя
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ k8s_home }}/.kube/config"
        remote_src: yes
        owner: "{{ k8s_user }}"
        group: "{{ k8s_group }}"
        mode: 0600

    - name: Получение команды join для control-plane
      command: kubeadm token create --print-join-command
      register: join_command
      changed_when: false

    - name: Получение certificate key
      command: kubeadm init phase upload-certs --upload-certs
      register: cert_key
      changed_when: false

    - name: Сохранение команд join
      copy:
        content: |
          Control Plane Join Command:
          kubeadm join {{ cluster_vip }}:6443 --token {{ join_command.stdout.split()[3] }} \
            --discovery-token-ca-cert-hash {{ join_command.stdout.split()[5] }} \
            --control-plane --certificate-key {{ cert_key.stdout.split()[3] }}

          Worker Join Command:
          kubeadm join {{ cluster_vip }}:6443 --token {{ join_command.stdout.split()[3] }} \
            --discovery-token-ca-cert-hash {{ join_command.stdout.split()[5] }}
        dest: "{{ k8s_home }}/k8s-join-commands.txt"
        owner: "{{ k8s_user }}"
        group: "{{ k8s_group }}"
        mode: 0600

    - name: Сохранение команд join в переменные
      set_fact:
        control_plane_join_command: "kubeadm join {{ cluster_vip }}:6443 --token {{ join_command.stdout.split()[3] }} --discovery-token-ca-cert-hash {{ join_command.stdout.split()[5] }} --control-plane --certificate-key {{ cert_key.stdout.split()[3] }}"
        worker_join_command: "kubeadm join {{ cluster_vip }}:6443 --token {{ join_command.stdout.split()[3] }} --discovery-token-ca-cert-hash {{ join_command.stdout.split()[5] }}"
  when: inventory_hostname == "master-node-1"

- name: Ожидание инициализации первого мастера
  wait_for:
    path: /etc/kubernetes/admin.conf
    state: present
  when: inventory_hostname == "master-node-1"

- name: Присоединение других мастер-узлов
  command: "{{ hostvars['master-node-1']['control_plane_join_command'] }}"
  when:
    - inventory_hostname != "master-node-1"
    - inventory_hostname in groups['masters']

- name: Настройка kubectl на других мастерах
  block:
    - name: Копирование конфигурации с первого мастера
      slurp:
        src: "{{ k8s_home }}/.kube/config"
      register: kubeconfig
      delegate_to: master-node-1

    - name: Запись конфигурации на текущий узел
      copy:
        content: "{{ kubeconfig.content | b64decode }}"
        dest: "{{ k8s_home }}/.kube/config"
        owner: "{{ k8s_user }}"
        group: "{{ k8s_group }}"
        mode: 0600
  when:
    - inventory_hostname != "master-node-1"
    - inventory_hostname in groups['masters']