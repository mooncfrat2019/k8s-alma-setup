#!/bin/bash
set -e

# Configuration
DOWNLOAD_DIR="./files/packages"
PACKAGE_LIST_FILE="./scripts/package-list.txt"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
mkdir -p "$DOWNLOAD_DIR"

# –í—ã–±–∏—Ä–∞–µ–º –≤–µ—Ä—Å–∏—é Kubernetes
K8S_VERSION="1.32.3"
echo "=== Downloading Kubernetes $K8S_VERSION and Dependency Packages for Ubuntu 22.04 ==="

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é Ubuntu
if [ -f /etc/os-release ]; then
    . /etc/os-release
    UBUNTU_VERSION=$VERSION_CODENAME
    UBUNTU_VERSION_ID=$VERSION_ID
else
    UBUNTU_VERSION=$(lsb_release -cs)
    UBUNTU_VERSION_ID=$(lsb_release -rs)
fi
echo "üìã Ubuntu version: $UBUNTU_VERSION ($UBUNTU_VERSION_ID)"
echo "üìã Kubernetes version: $K8S_VERSION"

K8S_MAJOR_MINOR=$(echo $K8S_VERSION | cut -d. -f1-2)

# –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
ALL_PACKAGES=(
    # System utilities
    "curl"
    "wget"
    "gnupg"
    "gnupg2"
    "software-properties-common"
    "apt-transport-https"
    "ca-certificates"
    "bridge-utils"
    "ntp"
    "ntpdate"

    # Container runtime
    "containerd"
    "containerd.io"

    # Docker
    "docker.io"

    # Kubernetes
    "kubelet"
    "kubeadm"
    "kubectl"
    "kubernetes-cni"

    # Networking
    "haproxy"
    "nginx"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
add_repositories() {
    echo "üîß Adding required repositories..."

    # Docker repository
    if ! grep -q "download.docker.com" /etc/apt/sources.list.d/docker.list 2>/dev/null; then
        echo "üì• Adding Docker repository..."
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $UBUNTU_VERSION stable" | sudo tee /etc/apt/sources.list.d/docker.list
    fi

    # Kubernetes repository
    if ! grep -q "pkgs.k8s.io" /etc/apt/sources.list.d/kubernetes.list 2>/dev/null; then
        echo "üì• Adding Kubernetes repository for version $K8S_VERSION..."
        curl -fsSL "https://pkgs.k8s.io/core:/stable:/v$K8S_MAJOR_MINOR/deb/Release.key" | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v$K8S_MAJOR_MINOR/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
    fi

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –ø–∞–∫–µ—Ç–æ–≤
    echo "üîÑ Updating package lists..."
    sudo apt-get update
}

# –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ—Å—Ç–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ –ë–ï–ó –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
download_packages_simple() {
    echo "üì¶ Method 1: Simple package download..."

    for pkg in "${ALL_PACKAGES[@]}"; do
        if apt-cache show "$pkg" &>/dev/null; then
            echo "üì• Downloading: $pkg"

            # –°–∫–∞—á–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –≤ —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            if apt-get download "$pkg" -o Dir::Cache::archives="$DOWNLOAD_DIR" 2>/dev/null; then
                echo "‚úÖ Downloaded: $pkg"
            else
                echo "‚ö†Ô∏è  Failed to download: $pkg"
            fi
        fi
    done
}

# –ú–µ—Ç–æ–¥ 2: –ü—Ä—è–º–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ Kubernetes –ø–∞–∫–µ—Ç–æ–≤
download_kubernetes_direct() {
    echo "üì¶ Method 2: Direct Kubernetes package download..."

    K8S_PACKAGES=(
        "kubelet"
        "kubeadm"
        "kubectl"
    )

    for pkg in "${K8S_PACKAGES[@]}"; do
        filename="${pkg}_${K8S_VERSION}-1.1_amd64.deb"
        url="https://pkgs.k8s.io/core:/stable:/v${K8S_MAJOR_MINOR}/deb/amd64/${filename}"

        echo "üì• Downloading: $pkg"
        if wget -q --timeout=30 --tries=3 "$url" -O "$DOWNLOAD_DIR/$filename"; then
            echo "‚úÖ Downloaded: $pkg"
        else
            echo "‚ùå Failed: $pkg"
        fi
    done

    # CNI plugins
    CNI_VERSION="1.4.0"
    CNI_PACKAGE="kubernetes-cni_${CNI_VERSION}-0.0~amd64.deb"
    CNI_URL="https://pkgs.k8s.io/core:/stable:/v${K8S_MAJOR_MINOR}/deb/amd64/${CNI_PACKAGE}"

    echo "üì• Downloading: kubernetes-cni"
    if wget -q --timeout=30 "$CNI_URL" -O "$DOWNLOAD_DIR/$CNI_PACKAGE"; then
        echo "‚úÖ Downloaded: kubernetes-cni"
    else
        echo "‚ö†Ô∏è  Failed to download CNI plugins"
    fi
}

# –ú–µ—Ç–æ–¥ 3: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
download_core_packages() {
    echo "üì¶ Method 3: Downloading core system packages..."

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã —Å –ø—Ä—è–º—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
    declare -A CORE_PACKAGES=(
        ["curl"]="http://archive.ubuntu.com/ubuntu/pool/main/c/curl/curl_7.81.0-1ubuntu1.15_amd64.deb"
        ["wget"]="http://archive.ubuntu.com/ubuntu/pool/main/w/wget/wget_1.21.2-2ubuntu1_amd64.deb"
        ["gnupg2"]="http://archive.ubuntu.com/ubuntu/pool/main/g/gnupg2/gnupg2_2.2.27-3ubuntu2.1_amd64.deb"
        ["software-properties-common"]="http://archive.ubuntu.com/ubuntu/pool/main/s/software-properties/software-properties-common_0.99.22.7_amd64.deb"
        ["apt-transport-https"]="http://archive.ubuntu.com/ubuntu/pool/main/a/apt/apt-transport-https_2.4.9_amd64.deb"
        ["ca-certificates"]="http://archive.ubuntu.com/ubuntu/pool/main/c/ca-certificates/ca-certificates_20211016ubuntu0.22.04.1_all.deb"
        ["bridge-utils"]="http://archive.ubuntu.com/ubuntu/pool/main/b/bridge-utils/bridge-utils_1.7-1ubuntu1_amd64.deb"
        ["containerd"]="http://archive.ubuntu.com/ubuntu/pool/universe/c/containerd/containerd_1.6.12-0ubuntu1_amd64.deb"
        ["docker.io"]="http://archive.ubuntu.com/ubuntu/pool/universe/d/docker.io/docker.io_20.10.21-0ubuntu1_amd64.deb"
        ["haproxy"]="http://archive.ubuntu.com/ubuntu/pool/main/h/haproxy/haproxy_2.4.13-1ubuntu1_amd64.deb"
        ["nginx"]="http://archive.ubuntu.com/ubuntu/pool/main/n/nginx/nginx_1.18.0-6ubuntu14.4_amd64.deb"
    )

    for pkg in "${!CORE_PACKAGES[@]}"; do
        url="${CORE_PACKAGES[$pkg]}"
        filename=$(basename "$url")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–∫–∞—á–∞–Ω –ª–∏ —É–∂–µ –ø–∞–∫–µ—Ç
        if ! ls "$DOWNLOAD_DIR"/*"$pkg"* > /dev/null 2>&1; then
            echo "üì• Downloading: $pkg"
            if wget -q --timeout=30 --tries=3 "$url" -O "$DOWNLOAD_DIR/$filename"; then
                echo "‚úÖ Downloaded: $pkg"
            else
                echo "‚ùå Failed: $pkg"
            fi
        fi
    done
}

# –ú–µ—Ç–æ–¥ 4: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
download_packages_alternative() {
    echo "üì¶ Method 4: Alternative download method..."

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ü–µ–ª–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ç–∞–º
    cd "$DOWNLOAD_DIR"

    for pkg in "${ALL_PACKAGES[@]}"; do
        if apt-cache show "$pkg" &>/dev/null; then
            echo "üì• Downloading: $pkg"
            if apt-get download "$pkg" 2>/dev/null; then
                echo "‚úÖ Downloaded: $pkg"
            else
                echo "‚ö†Ô∏è  Failed to download: $pkg"
            fi
        fi
    done

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
    cd - > /dev/null
}

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
echo "üîÑ Setting up for Kubernetes $K8S_VERSION on Ubuntu 22.04..."

sudo apt-get update
add_repositories

# –ü—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
download_packages_simple
download_kubernetes_direct
download_core_packages
download_packages_alternative

# –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
echo "üèóÔ∏è Creating local repository..."
cd "$DOWNLOAD_DIR"
if ls *.deb > /dev/null 2>&1; then
    dpkg-scanpackages . /dev/null 2>/dev/null | gzip -9c > Packages.gz
    echo "‚úÖ Repository index created"
else
    echo "‚ùå No packages to index"
fi

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤
ls -la *.deb > "$PACKAGE_LIST_FILE" 2>/dev/null || echo "No packages downloaded" > "$PACKAGE_LIST_FILE"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
echo ""
echo "üìä Download Summary:"
PACKAGE_COUNT=$(ls -1 *.deb 2>/dev/null | wc -l || echo 0)
echo "üìÅ Packages downloaded: $PACKAGE_COUNT"
echo "üìã Package list: $PACKAGE_LIST_FILE"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã
echo ""
echo "üîç Critical package check:"
CRITICAL_PACKAGES=("kubelet" "kubeadm" "kubectl" "containerd" "docker.io")
MISSING_COUNT=0

for pkg in "${CRITICAL_PACKAGES[@]}"; do
    if ls *"$pkg"* > /dev/null 2>&1; then
        echo "‚úÖ $pkg - FOUND"
    else
        echo "‚ùå $pkg - MISSING"
        MISSING_COUNT=$((MISSING_COUNT + 1))
    fi
done

if [ $MISSING_COUNT -eq 0 ]; then
    echo ""
    echo "üéâ All critical packages downloaded successfully!"
    echo "üöÄ Ready for offline installation!"
else
    echo ""
    echo "‚ö†Ô∏è  Missing $MISSING_COUNT critical packages"
    echo "Some packages may need to be downloaded manually"
fi