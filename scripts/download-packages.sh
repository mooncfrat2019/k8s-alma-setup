#!/bin/bash
set -e

# Configuration
DOWNLOAD_DIR="./files/packages"
PACKAGE_LIST_FILE="./scripts/package-list.txt"
mkdir -p $DOWNLOAD_DIR

# –í—ã–±–∏—Ä–∞–µ–º –≤–µ—Ä—Å–∏—é Kubernetes (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ 1.33.0 –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
K8S_VERSION="1.32.3"
echo "=== Downloading Kubernetes $K8S_VERSION and Dependency Packages for Ubuntu 22.04 ==="

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é Ubuntu
if [ -f /etc/os-release ]; then
    . /etc/os-release
    UBUNTU_VERSION=$VERSION_CODENAME
    UBUNTU_VERSION_ID=$VERSION_ID
else
    UBUNTU_VERSION=$(lsb_release -cs)
    UBUNTU_VERSION_ID=$(lsb_release -rs)
fi
echo "üìã Ubuntu version: $UBUNTU_VERSION ($UBUNTU_VERSION_ID)"
echo "üìã Kubernetes version: $K8S_VERSION"

# –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
ALL_PACKAGES=(
    # System utilities
    "curl"
    "wget"
    "gnupg"
    "gnupg2"
    "software-properties-common"
    "apt-transport-https"
    "ca-certificates"
    "bridge-utils"
    "ntp"
    "ntpdate"
    "systemd"
    "dbus"
    "libseccomp2"
    "conntrack"
    "socat"
    "ebtables"
    "ethtool"
    "ipset"
    "iptables"
    "ipvsadm"

    # Container runtime
    "containerd"
    "containerd.io"
    "runc"
    "cri-tools"

    # Docker
    "docker.io"
    "docker-ce"
    "docker-ce-cli"
    "docker-buildx-plugin"
    "docker-compose-plugin"

    # Kubernetes
    "kubelet"
    "kubeadm"
    "kubectl"
    "kubernetes-cni"

    # Networking
    "haproxy"
    "nginx"
    "keepalived"

    # Additional dependencies
    "tar"
    "gzip"
    "xz-utils"
    "git"
    "build-essential"
    "libssl-dev"
    "libffi-dev"
    "python3"
    "python3-pip"
    "jq"
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–ª—è Ubuntu 22.04 –∏ Kubernetes 1.32/1.33
add_repositories() {
    echo "üîß Adding required repositories for Ubuntu 22.04 and Kubernetes $K8S_VERSION..."

    # Docker repository
    if ! grep -q "download.docker.com" /etc/apt/sources.list.d/docker.list 2>/dev/null; then
        echo "üì• Adding Docker repository..."
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $UBUNTU_VERSION stable" | sudo tee /etc/apt/sources.list.d/docker.list
    fi

    # Kubernetes repository - –ü–†–ê–í–ò–õ–¨–ù–´–ô –î–õ–Ø KUBERNETES 1.32/1.33
    if ! grep -q "pkgs.k8s.io" /etc/apt/sources.list.d/kubernetes.list 2>/dev/null; then
        echo "üì• Adding Kubernetes repository for version $K8S_VERSION..."

        # –î–ª—è Kubernetes 1.32/1.33 –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        K8S_MAJOR_MINOR=$(echo $K8S_VERSION | cut -d. -f1-2)
        curl -fsSL "https://pkgs.k8s.io/core:/stable:/v$K8S_MAJOR_MINOR/deb/Release.key" | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

        # –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è Kubernetes 1.32/1.33 –Ω–∞ Ubuntu 22.04
        echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v$K8S_MAJOR_MINOR/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
    fi

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –ø–∞–∫–µ—Ç–æ–≤
    echo "üîÑ Updating package lists..."
    sudo apt-get update
}

# –ú–µ—Ç–æ–¥ 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º apt-get download —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
download_with_apt_get() {
    echo "üì¶ Method 1: Using apt-get download..."

    local packages_to_download=()

    for pkg in "${ALL_PACKAGES[@]}"; do
        if apt-cache show "$pkg" &>/dev/null; then
            packages_to_download+=("$pkg")
        fi
    done

    if [ ${#packages_to_download[@]} -eq 0 ]; then
        echo "‚ö†Ô∏è  No packages found in repositories"
        return 1
    fi

    # –°–∫–∞—á–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç—ã –∏ –∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    for pkg in "${packages_to_download[@]}"; do
        echo "üì• Downloading: $pkg"

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        TEMP_DIR=$(mktemp -d)
        cd "$TEMP_DIR"

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        DEPS=$(apt-cache depends --recurse --no-recommends --no-suggests --no-conflicts --no-breaks --no-replaces --no-enhances "$pkg" 2>/dev/null | grep "^\w" | sort -u)

        # –°–∫–∞—á–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–∫–µ—Ç –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if apt-get download $pkg $DEPS 2>/dev/null; then
            # –ö–æ–ø–∏—Ä—É–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
            for deb_file in *.deb; do
                if [ -f "$deb_file" ]; then
                    cp "$deb_file" "$DOWNLOAD_DIR/"
                    echo "‚úÖ Downloaded: $deb_file"
                fi
            done
        else
            echo "‚ö†Ô∏è  Failed to download: $pkg"
        fi

        # –û—á–∏—Å—Ç–∫–∞
        cd -
        rm -rf "$TEMP_DIR"
    done
}

# –ú–µ—Ç–æ–¥ 2: –ü—Ä—è–º–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ Kubernetes –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –≤–µ—Ä—Å–∏–∏ 1.32/1.33
download_kubernetes_packages_direct() {
    echo "üì¶ Method 2: Direct download of Kubernetes $K8S_VERSION packages..."

    K8S_PACKAGES=(
        "kubelet"
        "kubeadm"
        "kubectl"
    )

    for pkg in "${K8S_PACKAGES[@]}"; do
        filename="${pkg}_${K8S_VERSION}-1.1_amd64.deb"
        url="https://pkgs.k8s.io/core:/stable:/v${K8S_MAJOR_MINOR}/deb/amd64/${filename}"

        echo "üì• Downloading: $pkg"
        if wget -q --timeout=30 --tries=3 "$url" -O "$DOWNLOAD_DIR/$filename"; then
            echo "‚úÖ Downloaded: $pkg"
        else
            echo "‚ùå Failed: $pkg"
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL
            alt_url="https://storage.googleapis.com/k8s-release/release/v$K8S_VERSION/bin/linux/amd64/$filename"
            if wget -q --timeout=30 --tries=2 "$alt_url" -O "$DOWNLOAD_DIR/$filename"; then
                echo "‚úÖ Downloaded from alternative: $pkg"
            else
                echo "‚ùå Failed all attempts: $pkg"
            fi
        fi
    done

    # CNI plugins
    CNI_VERSION="1.4.0"
    CNI_PACKAGE="kubernetes-cni_${CNI_VERSION}-0.0~amd64.deb"
    CNI_URL="https://pkgs.k8s.io/core:/stable:/v${K8S_MAJOR_MINOR}/deb/amd64/${CNI_PACKAGE}"

    echo "üì• Downloading: kubernetes-cni"
    if wget -q --timeout=30 "$CNI_URL" -O "$DOWNLOAD_DIR/$CNI_PACKAGE"; then
        echo "‚úÖ Downloaded: kubernetes-cni"
    else
        echo "‚ö†Ô∏è  Failed to download CNI plugins"
    fi
}

# –ú–µ—Ç–æ–¥ 3: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è Ubuntu 22.04
download_system_packages() {
    echo "üì¶ Method 3: Downloading system packages for Ubuntu 22.04..."

    # –ü–∞–∫–µ—Ç—ã –¥–ª—è Ubuntu 22.04 (Jammy) —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏
    declare -A PACKAGE_URLS=(
        # System packages
        ["curl"]="http://archive.ubuntu.com/ubuntu/pool/main/c/curl/curl_7.81.0-1ubuntu1.15_amd64.deb"
        ["wget"]="http://archive.ubuntu.com/ubuntu/pool/main/w/wget/wget_1.21.2-2ubuntu1_amd64.deb"
        ["gnupg2"]="http://archive.ubuntu.com/ubuntu/pool/main/g/gnupg2/gnupg2_2.2.27-3ubuntu2.1_amd64.deb"
        ["software-properties-common"]="http://archive.ubuntu.com/ubuntu/pool/main/s/software-properties/software-properties-common_0.99.22.7_amd64.deb"
        ["apt-transport-https"]="http://archive.ubuntu.com/ubuntu/pool/main/a/apt/apt-transport-https_2.4.9_amd64.deb"
        ["ca-certificates"]="http://archive.ubuntu.com/ubuntu/pool/main/c/ca-certificates/ca-certificates_20211016ubuntu0.22.04.1_all.deb"
        ["bridge-utils"]="http://archive.ubuntu.com/ubuntu/pool/main/b/bridge-utils/bridge-utils_1.7-1ubuntu1_amd64.deb"
        ["ntp"]="http://archive.ubuntu.com/ubuntu/pool/main/n/ntp/ntp_1.4.2.8+dfsg-1ubuntu3.2_amd64.deb"

        # Container runtime
        ["containerd"]="http://archive.ubuntu.com/ubuntu/pool/universe/c/containerd/containerd_1.6.12-0ubuntu1_amd64.deb"
        ["docker.io"]="http://archive.ubuntu.com/ubuntu/pool/universe/d/docker.io/docker.io_20.10.21-0ubuntu1_amd64.deb"

        # Networking
        ["haproxy"]="http://archive.ubuntu.com/ubuntu/pool/main/h/haproxy/haproxy_2.4.13-1ubuntu1_amd64.deb"
        ["nginx"]="http://archive.ubuntu.com/ubuntu/pool/main/n/nginx/nginx_1.18.0-6ubuntu14.4_amd64.deb"
    )

    for pkg in "${!PACKAGE_URLS[@]}"; do
        url="${PACKAGE_URLS[$pkg]}"
        filename=$(basename "$url")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–∫–∞—á–∞–Ω –ª–∏ —É–∂–µ –ø–∞–∫–µ—Ç
        if ! ls "$DOWNLOAD_DIR"/*"$pkg"* > /dev/null 2>&1; then
            echo "üì• Downloading: $pkg"
            if wget -q --timeout=30 --tries=3 "$url" -O "$DOWNLOAD_DIR/$filename"; then
                echo "‚úÖ Downloaded: $pkg"
            else
                echo "‚ùå Failed: $pkg"
            fi
        fi
    done
}

# –ú–µ—Ç–æ–¥ 4: –ò—Å–ø–æ–ª—å–∑—É–µ–º aptitude –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
download_with_aptitude() {
    echo "üì¶ Method 4: Using aptitude..."

    if ! command -v aptitude &> /dev/null; then
        sudo apt-get install -y aptitude
    fi

    # –°–∫–∞—á–∏–≤–∞–µ–º –ø–∞–∫–µ—Ç—ã –≤ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    TEMP_DIR=$(mktemp -d)
    cd "$TEMP_DIR"

    for pkg in "${ALL_PACKAGES[@]}"; do
        if apt-cache show "$pkg" &>/dev/null; then
            echo "üì• Downloading with dependencies: $pkg"
            if aptitude download "$pkg" 2>/dev/null; then
                for deb_file in *.deb; do
                    if [ -f "$deb_file" ]; then
                        cp "$deb_file" "$DOWNLOAD_DIR/"
                        echo "‚úÖ Downloaded: $deb_file"
                    fi
                done
            fi
        fi
    done

    cd -
    rm -rf "$TEMP_DIR"
}

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
echo "üîÑ Setting up for Kubernetes $K8S_VERSION on Ubuntu 22.04..."
K8S_MAJOR_MINOR=$(echo $K8S_VERSION | cut -d. -f1-2)

sudo apt-get update
add_repositories

# –ü—Ä–æ–±—É–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
download_with_apt_get
download_kubernetes_packages_direct
download_system_packages
download_with_aptitude

# –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
echo "üèóÔ∏è Creating local repository..."
cd "$DOWNLOAD_DIR"
if ls *.deb > /dev/null 2>&1; then
    dpkg-scanpackages . /dev/null 2>/dev/null | gzip -9c > Packages.gz
    echo "‚úÖ Repository index created"
else
    echo "‚ùå No packages to index"
fi

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤
ls -la *.deb > "$PACKAGE_LIST_FILE" 2>/dev/null || echo "No packages downloaded" > "$PACKAGE_LIST_FILE"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
echo ""
echo "üìä Download Summary:"
echo "üìÅ Packages downloaded: $(ls -1 *.deb 2>/dev/null | wc -l || echo 0)"
echo "üìã Package list: $PACKAGE_LIST_FILE"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã
echo ""
echo "üîç Critical package check:"
CRITICAL_PACKAGES=("kubelet" "kubeadm" "kubectl" "containerd" "docker.io")
MISSING_COUNT=0

for pkg in "${CRITICAL_PACKAGES[@]}"; do
    if ls *"$pkg"* > /dev/null 2>&1; then
        echo "‚úÖ $pkg - FOUND"
    else
        echo "‚ùå $pkg - MISSING"
        MISSING_COUNT=$((MISSING_COUNT + 1))
    fi
done

if [ $MISSING_COUNT -eq 0 ]; then
    echo ""
    echo "üéâ All critical packages downloaded successfully!"
    echo "üöÄ Ready for offline installation!"
else
    echo ""
    echo "‚ö†Ô∏è  Missing $MISSING_COUNT critical packages"
    echo "Some packages may need to be downloaded manually"
fi