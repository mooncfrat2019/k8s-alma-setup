---
- name: Запуск и включение Docker
  systemd:
    name: docker
    state: started
    enabled: yes

- name: Настройка незащищенного registry в Docker
  copy:
    content: |
      {
        "insecure-registries": ["{{ registry_url }}"]
      }
    dest: /etc/docker/daemon.json
    mode: 0644

- name: Перезагрузка Docker
  systemd:
    name: docker
    state: restarted

- name: Создание директории для registry
  file:
    path: /opt/docker-registry
    state: directory
    mode: 0755

- name: Создание директории для данных registry
  file:
    path: /opt/docker-registry/data
    state: directory
    mode: 0755

- name: Настройка Docker registry конфигурации
  template:
    src: registry-config.yml.j2
    dest: /opt/docker-registry/docker-compose.yml
    mode: 0644

- name: Остановка существующего registry контейнера
  shell: |
    cd /opt/docker-registry
    docker-compose down || true
    docker rm -f registry || true
  args:
    executable: /bin/bash
  ignore_errors: yes

- name: Запуск Docker registry через docker-compose
  shell: |
    cd /opt/docker-registry
    docker-compose up -d
  args:
    executable: /bin/bash
  register: compose_result
  failed_when: compose_result.rc != 0

- name: Ожидание запуска registry
  wait_for:
    host: "{{ registry_host }}"
    port: "{{ registry_port }}"
    delay: 5
    timeout: 30

- name: Проверка что registry работает
  shell: |
    curl -s http://{{ registry_url }}/v2/_catalog
  register: registry_check
  changed_when: false

- name: Показать статус registry
  debug:
    msg: "Registry status: {{ registry_check.stdout }}"

- name: Проверка загруженных образов в Docker
  shell: |
    docker images
  register: docker_images
  changed_when: false

- name: Показать образы в Docker
  debug:
    msg: "Images in Docker: {{ docker_images.stdout }}"

- name: Создание простого скрипта для загрузки образов
  copy:
    dest: /opt/docker-registry/push-images.sh
    content: |
      #!/bin/bash
      set -x
      
      REGISTRY="{{ registry_url }}"
      IMAGES_DIR="{{ k8s_home }}/k8s-offline/files/images"
      
      echo "=== Step 1: Loading all images ==="
      for tar_file in $IMAGES_DIR/*.tar; do
          if [ -f "$tar_file" ]; then
              echo "Loading: $tar_file"
              docker load -i "$tar_file"
          fi
      done
      
      echo "=== Step 2: Listing all loaded images ==="
      docker images
      
      echo "=== Step 3: Tagging and pushing images ==="
      # Get all image IDs except <none>
      docker images --no-trunc --format "{{.ID}} {{.Repository}} {{.Tag}}" | while read id repository tag; do
          if [ "$repository" != "<none>" ] && [ "$tag" != "<none>" ]; then
              echo "Processing: $repository:$tag"
      
              # Create new tag
              if [[ "$repository" == *"/"* ]]; then
                  new_name=$(echo $repository | cut -d'/' -f2-)
              else
                  new_name=$repository
              fi
      
              new_tag="$REGISTRY/$new_name:$tag"
              echo "Tagging: $repository:$tag -> $new_tag"
              docker tag "$repository:$tag" "$new_tag"
      
              echo "Pushing: $new_tag"
              docker push "$new_tag"
      
              echo "Done: $new_tag"
          fi
      done
      
      echo "=== Step 4: Final check ==="
      curl -s http://$REGISTRY/v2/_catalog
    mode: 0755

- name: Загрузка образов в локальный registry
  shell: |
    cd /opt/docker-registry
    ./push-images.sh
  args:
    executable: /bin/bash
  register: push_result

- name: Показать результат загрузки
  debug:
    msg: "Push script output: {{ push_result.stdout }}"

- name: Проверка загруженных образов в registry
  shell: |
    curl -s http://{{ registry_url }}/v2/_catalog
  register: registry_catalog
  changed_when: false

- name: Показать финальный результат
  debug:
    msg: "Final registry catalog: {{ registry_catalog.stdout }}"

- name: Проверка что registry хранит данные
  shell: |
    find /opt/docker-registry/data -type f -name "manifest" | head -5
  register: registry_data
  ignore_errors: yes

- name: Показать данные registry
  debug:
    msg: "Registry data files: {{ registry_data.stdout }}"